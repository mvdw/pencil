<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Shapes
    xmlns="http://www.evolus.vn/Namespace/Pencil"
    xmlns:cc="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
    xmlns:p="http://www.evolus.vn/Namespace/Pencil"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    author="Michiel van der Wulp"
    description="Decision Modeling Notation (DMN) drawing stencils"
    displayName="DMN"
    id="DMN.01"
    url="https://github.com/prikhi/pencil">
  
    <Properties>
        <PropertyGroup name="Background">
            <Property displayName="Background" name="fillColor" type="Color">#eae4b5ff</Property>
        </PropertyGroup>
        <PropertyGroup name="Border">
            <Property displayName="Border Color" name="strokeColor" type="Color">#0</Property>
            <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">2|</Property>
        </PropertyGroup>
        <PropertyGroup name="Text">
            <Property displayName="Default font" name="defaultTextFont" type="Font">Calibri|normal|normal|12px</Property>
            <Property displayName="defaultextcolor" name="defaultTextColor" type="Color">0</Property>
        </PropertyGroup>
    </Properties>

  
    <Script>
        <![CDATA[
            collection.VIA_LENGTH = 15;

            collection.buildSnappingGuides = function (shape) {
                var box = shape.getProperty("box");
                return [
                    new SnappingData("Top", 0, "Top", false, shape.id).makeLocal(true),
                    new SnappingData("HCenter", box.h / 2, "HCenter", false, shape.id).makeLocal(true),
                    new SnappingData("Bottom", box.h, "Bottom", false, shape.id).makeLocal(true),
                    new SnappingData("Left", 0, "Left", true, shape.id).makeLocal(true),
                    new SnappingData("VCenter", box.w / 2, "VCenter", true, shape.id).makeLocal(true),
                    new SnappingData("Right", box.w, "Right", true, shape.id).makeLocal(true)
                    ]
            };

            collection.buildConnectorOutletsWith = function (box, overridingOutlets) {
                var definedOutlets = [];
                var outlets = [];
                if (overridingOutlets) {
                    for (var i in overridingOutlets) {
                        var outlet = overridingOutlets[i];
                        definedOutlets.push(outlet.id);
                        if (outlet.classes) outlets.push(outlet);
                    }
                }

                var systemOutlets = [
                    new Outlet("top-left", "FCInput", 0, 0),
                    new Outlet("top-center", "FCInput", box.w / 2, 0),
                    new Outlet("top-right", "FCInput", box.w, 0),
                    new Outlet("middle-left", "FCInput", 0, box.h / 2),
                    new Outlet("middle-center", "FCInput", box.w / 2, box.h / 2),
                    new Outlet("middle-right", "FCInput", box.w, box.h / 2),
                    new Outlet("bottom-left", "FCInput", 0, box.h),
                    new Outlet("bottom-center", "FCInput", box.w / 2, box.h),
                    new Outlet("bottom-right", "FCInput", box.w, box.h)
                ];

                for (var i in systemOutlets) {
                    var outlet = systemOutlets[i];
                    stencilDebug("checking: " + outlet.id);
                    if (definedOutlets.indexOf(outlet.id) >= 0) continue;
                    stencilDebug("\tadding: " + outlet.id);

                    outlets.push(outlet);
                }

                return outlets;
            };

        ]]>
    </Script>


	<Shortcut displayName="Straight Connector" icon="Icons/straight-connector.png" to="Evolus.Common:arrow">
        <PropertyValue name="textFont"><E>$$defaultTextFont</E></PropertyValue>
        <PropertyValue name="textColor"><E>$$defaultTextColor</E></PropertyValue>
        <PropertyValue name="strokeColor"><E>$$strokeColor</E></PropertyValue>
        <PropertyValue name="strokeStyle"><E>$$strokeStyle</E></PropertyValue>
        <PropertyValue name="mode">straight</PropertyValue>
        <PropertyValue name="withStartArrow">false</PropertyValue>
        <PropertyValue name="withEndArrow">true</PropertyValue>
    </Shortcut>
    <Shortcut displayName="Multi-segment Connector" icon="Icons/multi-segment-connector.png" to="Evolus.Common:arrow">
        <PropertyValue name="textFont"><E>$$defaultTextFont</E></PropertyValue>
        <PropertyValue name="textColor"><E>$$defaultTextColor</E></PropertyValue>
        <PropertyValue name="strokeColor"><E>$$strokeColor</E></PropertyValue>
        <PropertyValue name="strokeStyle"><E>$$strokeStyle</E></PropertyValue>
        <PropertyValue name="mode">multi-straight</PropertyValue>
        <PropertyValue name="withStartArrow">false</PropertyValue>
        <PropertyValue name="withEndArrow">true</PropertyValue>
    </Shortcut>
    <Shortcut displayName="Curvy Connector" icon="Icons/curvy-connector.png" to="Evolus.Common:arrow">
        <PropertyValue name="textFont"><E>$$defaultTextFont</E></PropertyValue>
        <PropertyValue name="textColor"><E>$$defaultTextColor</E></PropertyValue>
        <PropertyValue name="strokeColor"><E>$$strokeColor</E></PropertyValue>
        <PropertyValue name="strokeStyle"><E>$$strokeStyle</E></PropertyValue>
        <PropertyValue name="mode">curvy</PropertyValue>
        <PropertyValue name="withStartArrow">false</PropertyValue>
        <PropertyValue name="withEndArrow">true</PropertyValue>
    </Shortcut>
  
  <Shape id="decision" displayName="Decision"
        icon="Icons/decision.png">
          <Properties>
            <PropertyGroup>
                <Property displayName="Box" name="box" type="Dimension">140,50</Property>
                <Property displayName="Outpin #1 origin" name="outputPin1Origin" p:expressionX="$box.w / 2" p:expressionY="0" type="Point">50,0</Property>
                <Property displayName="Outpin #1" name="outputPin1" p:connectTo="FCInput" p:unconnectedValue="$outputPin1Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #2 origin" name="outputPin2Origin" p:expressionX="$box.w" p:expressionY="$box.h / 2" type="Point">100,50</Property>
                <Property displayName="Outpin #2" name="outputPin2" p:connectTo="FCInput" p:unconnectedValue="$outputPin2Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #3 origin" name="outputPin3Origin" p:expressionX="$box.w / 2" p:expressionY="$box.h" type="Point">50,100</Property>
                <Property displayName="Outpin #3" name="outputPin3" p:connectTo="FCInput" p:unconnectedValue="$outputPin3Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #4 origin" name="outputPin4Origin" p:expressionX="0" p:expressionY="$box.h / 2" type="Point">0,50</Property>
                <Property displayName="Outpin #4" name="outputPin4" p:connectTo="FCInput" p:unconnectedValue="$outputPin4Origin" type="Handle">0,0</Property>
            </PropertyGroup>
            <PropertyGroup name="Background">
                <Property displayName="Background" name="fillColor" type="Color">
                    <E>$$fillColor</E>
                </Property>
            </PropertyGroup>
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
            <PropertyGroup name="Text">
                <Property displayName="Text Content" name="textContent" p:editInfo="({targetName: 'text', bound: Bound.fromBox($box), font: $textFont, align: $textAlign, multi: true})" type="PlainText" />
                <Property displayName="Text Font" name="textFont" type="Font">
                    <E>$$defaultTextFont</E>
                </Property>
                <Property displayName="Text Color" name="textColor" type="Color">
                    <E>$$defaultTextColor</E>
                </Property>
                <Property displayName="Text Align" name="textAlign" type="Alignment">1,1</Property>
            </PropertyGroup>
        </Properties>
        <Behaviors>
            <For ref="path">
                <Transform>[translate(($strokeStyle.w % 2) / 2, ($strokeStyle.w % 2) / 2)]</Transform>
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <Fill>$fillColor</Fill>
                <Bound>Bound.fromBox($box)</Bound>
            </For>
            <For ref="text">
                <Font>$textFont</Font>
                <Color>$textColor</Color>
                <DomContent>F.buildTextWrapDomContent(F._target, $textContent.value, $box.w - $textFont.getPixelHeight(), $textAlign)</DomContent>
                <BoxFit>
                    <Arg>Bound.fromBox($box, $textFont.getPixelHeight() / 2)</Arg>
                    <Arg>new Alignment(1,1)</Arg>
                </BoxFit>
            </For>
            <For ref="outputArrrow1">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin1Origin, $outputPin1Origin.translate(0, 0 - collection.VIA_LENGTH)], $outputPin1, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow2">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin2Origin, $outputPin2Origin.translate(0 + collection.VIA_LENGTH, 0)], $outputPin2, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow3">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin3Origin, $outputPin3Origin.translate(0, 0 + collection.VIA_LENGTH)], $outputPin3, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow4">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin4Origin, $outputPin4Origin.translate(0 - collection.VIA_LENGTH, 0)], $outputPin4, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
        </Behaviors>
        <Actions>
            <Action id="getSnappingGuide">
                <Impl>return this.def.collection.buildSnappingGuides(this);</Impl>
            </Action>
        </Actions>
        <p:Content xmlns="http://www.w3.org/2000/svg">
            <rect id="path" style="stroke-linejoin: round;" />
            <text id="text" text-anchor="start" xml:space="preserve" />
            <path id="outputArrrow1" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow2" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow3" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow4" style="stroke-linejoin: round; fill: none;" />
        </p:Content>
    
  </Shape>


  <Shape id="inputdata" displayName="Input Data" icon="Icons/inputdata.png">
        <Properties>
            <PropertyGroup>
                <Property displayName="Box" name="box" type="Dimension">140,50</Property>
                <Property displayName="Outpin #1 origin" name="outputPin1Origin" p:expressionX="$box.w / 2" p:expressionY="0" type="Point">50,0</Property>
                <Property displayName="Outpin #1" name="outputPin1" p:connectTo="FCInput" p:unconnectedValue="$outputPin1Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #2 origin" name="outputPin2Origin" p:expressionX="$box.w" p:expressionY="$box.h / 2" type="Point">100,50</Property>
                <Property displayName="Outpin #2" name="outputPin2" p:connectTo="FCInput" p:unconnectedValue="$outputPin2Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #3 origin" name="outputPin3Origin" p:expressionX="$box.w / 2" p:expressionY="$box.h" type="Point">50,100</Property>
                <Property displayName="Outpin #3" name="outputPin3" p:connectTo="FCInput" p:unconnectedValue="$outputPin3Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #4 origin" name="outputPin4Origin" p:expressionX="0" p:expressionY="$box.h / 2" type="Point">0,50</Property>
                <Property displayName="Outpin #4" name="outputPin4" p:connectTo="FCInput" p:unconnectedValue="$outputPin4Origin" type="Handle">0,0</Property>
            </PropertyGroup>
            <PropertyGroup name="Background">
                <Property displayName="Background" name="fillColor" type="Color">
                    <E>$$fillColor</E>
                </Property>
            </PropertyGroup>
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
            <PropertyGroup name="Text">
                <Property displayName="Text Content" name="textContent" p:editInfo="({targetName: 'text', bound: Bound.fromBox($box), font: $textFont, align: $textAlign, multi: true})" type="PlainText" />
                <Property displayName="Text Font" name="textFont" type="Font">
                    <E>$$defaultTextFont</E>
                </Property>
                <Property displayName="Text Color" name="textColor" type="Color">
                    <E>$$defaultTextColor</E>
                </Property>
                <Property displayName="Text Align" name="textAlign" type="Alignment">1,1</Property>
            </PropertyGroup>
        </Properties>
        <Behaviors>
            <For ref="path">
                <Transform>[translate(($strokeStyle.w % 2) / 2, ($strokeStyle.w % 2) / 2)]</Transform>
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <Fill>$fillColor</Fill>
                <D>
                    var ay = $box.w / 3;
                    [M(ay/2, 0), L($box.w - ay/2, 0), C($box.w - ay/4, 0, $box.w, $box.h/4, $box.w, $box.h/2),
                    S($box.w - ay/4, $box.h, $box.w - ay/2, $box.h), L(ay/2, $box.h),
                    C(ay/4, $box.h, 0, 3*$box.h/4, 0, $box.h/2), S(ay/4, 0, ay/2, 0)
                    ]
                </D>
            </For>

            <For ref="text">
                <Font>$textFont</Font>
                <Color>$textColor</Color>
                <DomContent>F.buildTextWrapDomContent(F._target, $textContent.value, $box.w - $textFont.getPixelHeight(), $textAlign)</DomContent>
                <BoxFit>
                    <Arg>Bound.fromBox($box, $textFont.getPixelHeight() / 2)</Arg>
                    <Arg>$textAlign</Arg>
                </BoxFit>
            </For>
            <For ref="outputArrrow1">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin1Origin, $outputPin1Origin.translate(0, 0 - collection.VIA_LENGTH)], $outputPin1, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow2">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin2Origin, $outputPin2Origin.translate(0 + collection.VIA_LENGTH, 0)], $outputPin2, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow3">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin3Origin, $outputPin3Origin.translate(0, 0 + collection.VIA_LENGTH)], $outputPin3, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow4">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin4Origin, $outputPin4Origin.translate(0 - collection.VIA_LENGTH, 0)], $outputPin4, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
        </Behaviors>
        <Actions>
            <Action id="getSnappingGuide">
                <Impl>return this.def.collection.buildSnappingGuides(this);</Impl>
            </Action>
            <Action id="getConnectorOutlets">
                <Impl>
                <![CDATA[
                    var box = this.getProperty("box");
                    var d = box.w / 7;
                    return this.def.collection.buildConnectorOutletsWith(box, [
                        new Outlet("top-left", "FCInput", d, 0),
                        new Outlet("top-right", "FCInput", box.w - d, 0),
                        new Outlet("bottom-left", "FCInput", d, box.h),
                        new Outlet("bottom-right", "FCInput", box.w - d, box.h),
                    ]);
                ]]>
                </Impl>
            </Action>
        </Actions>
        <p:Content xmlns="http://www.w3.org/2000/svg">
            <path id="path" style="stroke-linejoin: round;" />

            <text id="text" text-anchor="start" xml:space="preserve" />
            <path id="outputArrrow1" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow2" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow3" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow4" style="stroke-linejoin: round; fill: none;" />
        </p:Content>
    </Shape>



 
    
  <Shape id="businessknowledge" displayName="Business Knowledge" icon="Icons/businessknowledge.png">
        <Properties>
            <PropertyGroup>
                <Property displayName="Box" name="box" type="Dimension">140,50</Property>
                <Property displayName="Outpin #1 origin" name="outputPin1Origin" p:expressionX="$box.w / 2" p:expressionY="0" type="Point">50,0</Property>
                <Property displayName="Outpin #1" name="outputPin1" p:connectTo="FCInput" p:unconnectedValue="$outputPin1Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #2 origin" name="outputPin2Origin" p:expressionX="$box.w" p:expressionY="$box.h / 2" type="Point">100,50</Property>
                <Property displayName="Outpin #2" name="outputPin2" p:connectTo="FCInput" p:unconnectedValue="$outputPin2Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #3 origin" name="outputPin3Origin" p:expressionX="$box.w / 2" p:expressionY="$box.h" type="Point">50,100</Property>
                <Property displayName="Outpin #3" name="outputPin3" p:connectTo="FCInput" p:unconnectedValue="$outputPin3Origin" type="Handle">0,0</Property>
                <Property displayName="Outpin #4 origin" name="outputPin4Origin" p:expressionX="0" p:expressionY="$box.h / 2" type="Point">0,50</Property>
                <Property displayName="Outpin #4" name="outputPin4" p:connectTo="FCInput" p:unconnectedValue="$outputPin4Origin" type="Handle">0,0</Property>
            </PropertyGroup>
            <PropertyGroup name="Background">
                <Property displayName="Background" name="fillColor" type="Color">
                    <E>$$fillColor</E>
                </Property>
            </PropertyGroup>
            <PropertyGroup name="Border">
                <Property displayName="Border Color" name="strokeColor" type="Color">
                    <E>$$strokeColor</E>
                </Property>
                <Property displayName="Border Style" name="strokeStyle" type="StrokeStyle">
                    <E>$$strokeStyle</E>
                </Property>
            </PropertyGroup>
            <PropertyGroup name="Text">
                <Property displayName="Text Content" name="textContent" p:editInfo="({targetName: 'text', bound: Bound.fromBox($box), font: $textFont, align: $textAlign, multi: true})" type="PlainText" />
                <Property displayName="Text Font" name="textFont" type="Font">
                    <E>$$defaultTextFont</E>
                </Property>
                <Property displayName="Text Color" name="textColor" type="Color">
                    <E>$$defaultTextColor</E>
                </Property>
                <Property displayName="Text Align" name="textAlign" type="Alignment">1,1</Property>
            </PropertyGroup>
        </Properties>
        <Behaviors>
            <For ref="path">
                <Transform>[translate(($strokeStyle.w % 2) / 2, ($strokeStyle.w % 2) / 2)]</Transform>
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <Fill>$fillColor</Fill>
                <D>     <!-- the tilted line is 1/3th of the height, and 45 degrees angle -->
		    var tilt = $box.h / 3;
		    [M(tilt,0), L($box.w,0), L($box.w,2*tilt), L($box.w-tilt,$box.h), L(0,$box.h), L(0,tilt), L(tilt,0)]
                </D>
            </For>

            <For ref="text">
                <Font>$textFont</Font>
                <Color>$textColor</Color>
                <DomContent>F.buildTextWrapDomContent(F._target, $textContent.value, $box.w - $textFont.getPixelHeight(), $textAlign)</DomContent>
                <BoxFit>
                    <Arg>Bound.fromBox($box, $textFont.getPixelHeight() / 2)</Arg>
                    <Arg>$textAlign</Arg>
                </BoxFit>
            </For>
            <For ref="outputArrrow1">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin1Origin, $outputPin1Origin.translate(0, 0 - collection.VIA_LENGTH)], $outputPin1, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow2">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin2Origin, $outputPin2Origin.translate(0 + collection.VIA_LENGTH, 0)], $outputPin2, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow3">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin3Origin, $outputPin3Origin.translate(0, 0 + collection.VIA_LENGTH)], $outputPin3, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
            <For ref="outputArrrow4">
                <StrokeColor>$strokeColor</StrokeColor>
                <StrokeStyle>$strokeStyle</StrokeStyle>
                <D>arrowTo([$outputPin4Origin, $outputPin4Origin.translate(0 - collection.VIA_LENGTH, 0)], $outputPin4, $strokeStyle.w, collection.VIA_LENGTH, false, false, true, false, 0)</D>
            </For>
        </Behaviors>
        <Actions>
            <Action id="getSnappingGuide">
                <Impl>return this.def.collection.buildSnappingGuides(this);</Impl>
            </Action>
            <Action id="getConnectorOutlets">
                <Impl>
                <![CDATA[
                    var box = this.getProperty("box");
                    var d = box.w / 7;
                    return this.def.collection.buildConnectorOutletsWith(box, [
                        new Outlet("top-left", "FCInput", d, 0),
                        new Outlet("top-right", "FCInput", box.w - d, 0),
                        new Outlet("bottom-left", "FCInput", d, box.h),
                        new Outlet("bottom-right", "FCInput", box.w - d, box.h),
                    ]);
                ]]>
                </Impl>
            </Action>
        </Actions>
        <p:Content xmlns="http://www.w3.org/2000/svg">
            <path id="path" style="stroke-linejoin: round;" />

            <text id="text" text-anchor="start" xml:space="preserve" />
            <path id="outputArrrow1" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow2" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow3" style="stroke-linejoin: round; fill: none;" />
            <path id="outputArrrow4" style="stroke-linejoin: round; fill: none;" />
        </p:Content>
    </Shape>    
    
    
    


    <!--Shape id="knowledgesource" displayName="Knowledge Source"
        icon="Icons/knowledgesource.png">

    </Shape-->



</Shapes>
